/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Amount,
  Context,
  Option,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  isSigner,
  mapAmountSerializer,
  mapSerializer,
  none,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  resolveCollectionDetails,
  resolveCreateV1Bytes,
  resolveCreators,
  resolveDecimals,
  resolveMasterEdition,
  resolvePrintSupply,
} from '../../hooked';
import { findMetadataPda } from '../accounts';
import { PickPartial, addObjectProperty, isWritable } from '../shared';
import {
  Collection,
  CollectionArgs,
  CollectionDetails,
  CollectionDetailsArgs,
  Creator,
  CreatorArgs,
  PrintSupply,
  PrintSupplyArgs,
  TokenStandard,
  TokenStandardArgs,
  Uses,
  UsesArgs,
  getCollectionDetailsSerializer,
  getCollectionSerializer,
  getCreatorSerializer,
  getPrintSupplySerializer,
  getTokenStandardSerializer,
  getUsesSerializer,
} from '../types';

// Accounts.
export type CreateV1InstructionAccounts = {
  /** Unallocated metadata account with address as pda of ['metadata', program id, mint id] */
  metadata?: PublicKey;
  /** Unallocated edition account with address as pda of ['metadata', program id, mint, 'edition'] */
  masterEdition?: PublicKey;
  /** Mint of token asset */
  mint: PublicKey | Signer;
  /** Mint authority */
  authority?: Signer;
  /** Payer */
  payer?: Signer;
  /** Update authority for the metadata account */
  updateAuthority?: PublicKey | Signer;
  /** System program */
  systemProgram?: PublicKey;
  /** Instructions sysvar account */
  sysvarInstructions?: PublicKey;
  /** SPL Token program */
  splTokenProgram?: PublicKey;
};

// Data.
export type CreateV1InstructionData = {
  discriminator: number;
  createV1Discriminator: number;
  name: string;
  symbol: string;
  uri: string;
  sellerFeeBasisPoints: Amount<'%', 2>;
  creators: Option<Array<Creator>>;
  primarySaleHappened: boolean;
  isMutable: boolean;
  tokenStandard: TokenStandard;
  collection: Option<Collection>;
  uses: Option<Uses>;
  collectionDetails: Option<CollectionDetails>;
  ruleSet: Option<PublicKey>;
  decimals: Option<number>;
  printSupply: Option<PrintSupply>;
};

export type CreateV1InstructionDataArgs = {
  name: string;
  symbol?: string;
  uri: string;
  sellerFeeBasisPoints: Amount<'%', 2>;
  creators: Option<Array<CreatorArgs>>;
  primarySaleHappened?: boolean;
  isMutable?: boolean;
  tokenStandard: TokenStandardArgs;
  collection?: Option<CollectionArgs>;
  uses?: Option<UsesArgs>;
  collectionDetails?: Option<CollectionDetailsArgs>;
  ruleSet?: Option<PublicKey>;
  decimals?: Option<number>;
  printSupply?: Option<PrintSupplyArgs>;
};

export function getCreateV1InstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<CreateV1InstructionDataArgs, CreateV1InstructionData> {
  const s = context.serializer;
  return mapSerializer<
    CreateV1InstructionDataArgs,
    CreateV1InstructionData,
    CreateV1InstructionData
  >(
    s.struct<CreateV1InstructionData>(
      [
        ['discriminator', s.u8()],
        ['createV1Discriminator', s.u8()],
        ['name', s.string()],
        ['symbol', s.string()],
        ['uri', s.string()],
        ['sellerFeeBasisPoints', mapAmountSerializer(s.u16(), '%', 2)],
        ['creators', s.option(s.array(getCreatorSerializer(context)))],
        ['primarySaleHappened', s.bool()],
        ['isMutable', s.bool()],
        ['tokenStandard', getTokenStandardSerializer(context)],
        ['collection', s.option(getCollectionSerializer(context))],
        ['uses', s.option(getUsesSerializer(context))],
        [
          'collectionDetails',
          s.option(getCollectionDetailsSerializer(context)),
        ],
        ['ruleSet', s.option(s.publicKey())],
        ['decimals', s.option(s.u8())],
        ['printSupply', s.option(getPrintSupplySerializer(context))],
      ],
      { description: 'CreateV1InstructionData' }
    ),
    (value) =>
      ({
        ...value,
        discriminator: 42,
        createV1Discriminator: 0,
        symbol: value.symbol ?? '',
        primarySaleHappened: value.primarySaleHappened ?? false,
        isMutable: value.isMutable ?? true,
        collection: value.collection ?? none(),
        uses: value.uses ?? none(),
        collectionDetails: value.collectionDetails ?? none(),
        ruleSet: value.ruleSet ?? none(),
        decimals: value.decimals ?? none(),
        printSupply: value.printSupply ?? none(),
      } as CreateV1InstructionData)
  ) as Serializer<CreateV1InstructionDataArgs, CreateV1InstructionData>;
}

// Extra Args.
export type CreateV1InstructionExtraArgs = { isCollection: boolean };

// Args.
export type CreateV1InstructionArgs = PickPartial<
  CreateV1InstructionDataArgs & CreateV1InstructionExtraArgs,
  | 'tokenStandard'
  | 'isCollection'
  | 'collectionDetails'
  | 'decimals'
  | 'printSupply'
  | 'creators'
>;

// Instruction.
export function createV1(
  context: Pick<
    Context,
    'serializer' | 'programs' | 'eddsa' | 'identity' | 'payer'
  >,
  input: CreateV1InstructionAccounts & CreateV1InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'mplTokenMetadata',
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(
    resolvingAccounts,
    'metadata',
    input.metadata ?? findMetadataPda(context, { mint: publicKey(input.mint) })
  );
  addObjectProperty(
    resolvingArgs,
    'tokenStandard',
    input.tokenStandard ?? TokenStandard.NonFungible
  );
  addObjectProperty(
    resolvingAccounts,
    'masterEdition',
    input.masterEdition ??
      resolveMasterEdition(
        context,
        { ...input, ...resolvingAccounts },
        { ...input, ...resolvingArgs },
        programId
      )
  );
  addObjectProperty(
    resolvingAccounts,
    'authority',
    input.authority ?? context.identity
  );
  addObjectProperty(resolvingAccounts, 'payer', input.payer ?? context.payer);
  addObjectProperty(
    resolvingAccounts,
    'updateAuthority',
    input.updateAuthority ?? resolvingAccounts.authority
  );
  addObjectProperty(
    resolvingAccounts,
    'systemProgram',
    input.systemProgram ?? {
      ...context.programs.getPublicKey(
        'splSystem',
        '11111111111111111111111111111111'
      ),
      isWritable: false,
    }
  );
  addObjectProperty(
    resolvingAccounts,
    'sysvarInstructions',
    input.sysvarInstructions ??
      publicKey('Sysvar1nstructions1111111111111111111111111')
  );
  addObjectProperty(
    resolvingAccounts,
    'splTokenProgram',
    input.splTokenProgram ?? {
      ...context.programs.getPublicKey(
        'splToken',
        'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
      ),
      isWritable: false,
    }
  );
  addObjectProperty(resolvingArgs, 'isCollection', input.isCollection ?? false);
  addObjectProperty(
    resolvingArgs,
    'collectionDetails',
    input.collectionDetails ??
      resolveCollectionDetails(
        context,
        { ...input, ...resolvingAccounts },
        { ...input, ...resolvingArgs },
        programId
      )
  );
  addObjectProperty(
    resolvingArgs,
    'decimals',
    input.decimals ??
      resolveDecimals(
        context,
        { ...input, ...resolvingAccounts },
        { ...input, ...resolvingArgs },
        programId
      )
  );
  addObjectProperty(
    resolvingArgs,
    'printSupply',
    input.printSupply ??
      resolvePrintSupply(
        context,
        { ...input, ...resolvingAccounts },
        { ...input, ...resolvingArgs },
        programId
      )
  );
  addObjectProperty(
    resolvingArgs,
    'creators',
    input.creators ??
      resolveCreators(
        context,
        { ...input, ...resolvingAccounts },
        { ...input, ...resolvingArgs },
        programId
      )
  );
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Metadata.
  keys.push({
    pubkey: resolvedAccounts.metadata,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.metadata, true),
  });

  // Master Edition.
  keys.push({
    pubkey: resolvedAccounts.masterEdition,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.masterEdition, true),
  });

  // Mint.
  if (isSigner(resolvedAccounts.mint)) {
    signers.push(resolvedAccounts.mint);
  }
  keys.push({
    pubkey: publicKey(resolvedAccounts.mint),
    isSigner: isSigner(resolvedAccounts.mint),
    isWritable: isWritable(resolvedAccounts.mint, true),
  });

  // Authority.
  signers.push(resolvedAccounts.authority);
  keys.push({
    pubkey: resolvedAccounts.authority.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.authority, false),
  });

  // Payer.
  signers.push(resolvedAccounts.payer);
  keys.push({
    pubkey: resolvedAccounts.payer.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.payer, true),
  });

  // Update Authority.
  if (isSigner(resolvedAccounts.updateAuthority)) {
    signers.push(resolvedAccounts.updateAuthority);
  }
  keys.push({
    pubkey: publicKey(resolvedAccounts.updateAuthority),
    isSigner: isSigner(resolvedAccounts.updateAuthority),
    isWritable: isWritable(resolvedAccounts.updateAuthority, false),
  });

  // System Program.
  keys.push({
    pubkey: resolvedAccounts.systemProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.systemProgram, false),
  });

  // Sysvar Instructions.
  keys.push({
    pubkey: resolvedAccounts.sysvarInstructions,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.sysvarInstructions, false),
  });

  // Spl Token Program.
  keys.push({
    pubkey: resolvedAccounts.splTokenProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.splTokenProgram, false),
  });

  // Data.
  const data =
    getCreateV1InstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = resolveCreateV1Bytes(
    context,
    resolvedAccounts,
    resolvedArgs,
    programId
  );

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
