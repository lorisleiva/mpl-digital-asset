/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { findAssociatedTokenPda } from '@metaplex-foundation/mpl-essentials';
import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { resolveMasterEdition, resolveTokenRecord } from '../../hooked';
import { findMetadataPda } from '../accounts';
import { PickPartial, addObjectProperty, isWritable } from '../shared';
import {
  BurnArgs,
  BurnArgsArgs,
  TokenStandardArgs,
  getBurnArgsSerializer,
} from '../types';

// Accounts.
export type BurnInstructionAccounts = {
  /** Asset owner or Utility delegate */
  authority?: Signer;
  /** Metadata of the Collection */
  collectionMetadata?: PublicKey;
  /** Metadata (pda of ['metadata', program id, mint id]) */
  metadata?: PublicKey;
  /** Edition of the asset */
  edition?: PublicKey;
  /** Mint of token asset */
  mint: PublicKey;
  /** Token account to close */
  token?: PublicKey;
  /** Master edition account */
  masterEdition?: PublicKey;
  /** Master edition mint of the asset */
  masterEditionMint?: PublicKey;
  /** Master edition token account */
  masterEditionToken?: PublicKey;
  /** Edition marker account */
  editionMarker?: PublicKey;
  /** Token record account */
  tokenRecord?: PublicKey;
  /** System program */
  systemProgram?: PublicKey;
  /** Instructions sysvar account */
  sysvarInstructions?: PublicKey;
  /** SPL Token Program */
  splTokenProgram?: PublicKey;
};

// Data.
export type BurnInstructionData = { discriminator: number; burnArgs: BurnArgs };

export type BurnInstructionDataArgs = { burnArgs: BurnArgsArgs };

export function getBurnInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<BurnInstructionDataArgs, BurnInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    BurnInstructionDataArgs,
    BurnInstructionData,
    BurnInstructionData
  >(
    s.struct<BurnInstructionData>(
      [
        ['discriminator', s.u8()],
        ['burnArgs', getBurnArgsSerializer(context)],
      ],
      { description: 'BurnInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 41 } as BurnInstructionData)
  ) as Serializer<BurnInstructionDataArgs, BurnInstructionData>;
}

// Extra Args.
export type BurnInstructionExtraArgs = {
  tokenOwner: PublicKey;
  tokenStandard: TokenStandardArgs;
};

// Args.
export type BurnInstructionArgs = PickPartial<
  BurnInstructionDataArgs & BurnInstructionExtraArgs,
  'tokenOwner'
>;

// Instruction.
export function burn(
  context: Pick<
    Context,
    'serializer' | 'programs' | 'eddsa' | 'identity' | 'payer'
  >,
  input: BurnInstructionAccounts & BurnInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'mplTokenMetadata',
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(
    resolvingAccounts,
    'authority',
    input.authority ?? context.identity
  );
  addObjectProperty(
    resolvingAccounts,
    'collectionMetadata',
    input.collectionMetadata ?? programId
  );
  addObjectProperty(
    resolvingAccounts,
    'metadata',
    input.metadata ?? findMetadataPda(context, { mint: publicKey(input.mint) })
  );
  addObjectProperty(
    resolvingAccounts,
    'edition',
    input.edition ??
      resolveMasterEdition(
        context,
        { ...input, ...resolvingAccounts },
        { ...input, ...resolvingArgs },
        programId
      )
  );
  addObjectProperty(
    resolvingArgs,
    'tokenOwner',
    input.tokenOwner ?? context.identity.publicKey
  );
  addObjectProperty(
    resolvingAccounts,
    'token',
    input.token ??
      findAssociatedTokenPda(context, {
        mint: publicKey(input.mint),
        owner: resolvingArgs.tokenOwner,
      })
  );
  addObjectProperty(
    resolvingAccounts,
    'masterEdition',
    input.masterEdition ?? programId
  );
  addObjectProperty(
    resolvingAccounts,
    'masterEditionMint',
    input.masterEditionMint ?? programId
  );
  addObjectProperty(
    resolvingAccounts,
    'masterEditionToken',
    input.masterEditionToken ?? programId
  );
  addObjectProperty(
    resolvingAccounts,
    'editionMarker',
    input.editionMarker ?? programId
  );
  addObjectProperty(
    resolvingAccounts,
    'tokenRecord',
    input.tokenRecord ??
      resolveTokenRecord(
        context,
        { ...input, ...resolvingAccounts },
        { ...input, ...resolvingArgs },
        programId
      )
  );
  addObjectProperty(
    resolvingAccounts,
    'systemProgram',
    input.systemProgram ?? {
      ...context.programs.getPublicKey(
        'splSystem',
        '11111111111111111111111111111111'
      ),
      isWritable: false,
    }
  );
  addObjectProperty(
    resolvingAccounts,
    'sysvarInstructions',
    input.sysvarInstructions ??
      publicKey('Sysvar1nstructions1111111111111111111111111')
  );
  addObjectProperty(
    resolvingAccounts,
    'splTokenProgram',
    input.splTokenProgram ?? {
      ...context.programs.getPublicKey(
        'splToken',
        'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
      ),
      isWritable: false,
    }
  );
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Authority.
  signers.push(resolvedAccounts.authority);
  keys.push({
    pubkey: resolvedAccounts.authority.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.authority, true),
  });

  // Collection Metadata.
  keys.push({
    pubkey: resolvedAccounts.collectionMetadata,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.collectionMetadata, true),
  });

  // Metadata.
  keys.push({
    pubkey: resolvedAccounts.metadata,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.metadata, true),
  });

  // Edition.
  keys.push({
    pubkey: resolvedAccounts.edition,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.edition, true),
  });

  // Mint.
  keys.push({
    pubkey: resolvedAccounts.mint,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.mint, true),
  });

  // Token.
  keys.push({
    pubkey: resolvedAccounts.token,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.token, true),
  });

  // Master Edition.
  keys.push({
    pubkey: resolvedAccounts.masterEdition,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.masterEdition, true),
  });

  // Master Edition Mint.
  keys.push({
    pubkey: resolvedAccounts.masterEditionMint,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.masterEditionMint, false),
  });

  // Master Edition Token.
  keys.push({
    pubkey: resolvedAccounts.masterEditionToken,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.masterEditionToken, false),
  });

  // Edition Marker.
  keys.push({
    pubkey: resolvedAccounts.editionMarker,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.editionMarker, true),
  });

  // Token Record.
  keys.push({
    pubkey: resolvedAccounts.tokenRecord,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.tokenRecord, true),
  });

  // System Program.
  keys.push({
    pubkey: resolvedAccounts.systemProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.systemProgram, false),
  });

  // Sysvar Instructions.
  keys.push({
    pubkey: resolvedAccounts.sysvarInstructions,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.sysvarInstructions, false),
  });

  // Spl Token Program.
  keys.push({
    pubkey: resolvedAccounts.splTokenProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.splTokenProgram, false),
  });

  // Data.
  const data =
    getBurnInstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
