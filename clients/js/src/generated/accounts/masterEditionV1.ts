/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  option,
  publicKey as publicKeySerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type MasterEditionV1 = Account<MasterEditionV1AccountData>;

export type MasterEditionV1AccountData = {
  key: Key;
  supply: bigint;
  maxSupply: Option<bigint>;
  printingMint: PublicKey;
  oneTimePrintingAuthorizationMint: PublicKey;
};

export type MasterEditionV1AccountDataArgs = {
  key: KeyArgs;
  supply: number | bigint;
  maxSupply: OptionOrNullable<number | bigint>;
  printingMint: PublicKey;
  oneTimePrintingAuthorizationMint: PublicKey;
};

/** @deprecated Use `getMasterEditionV1AccountDataSerializer()` without any argument instead. */
export function getMasterEditionV1AccountDataSerializer(
  _context: object
): Serializer<MasterEditionV1AccountDataArgs, MasterEditionV1AccountData>;
export function getMasterEditionV1AccountDataSerializer(): Serializer<
  MasterEditionV1AccountDataArgs,
  MasterEditionV1AccountData
>;
export function getMasterEditionV1AccountDataSerializer(
  _context: object = {}
): Serializer<MasterEditionV1AccountDataArgs, MasterEditionV1AccountData> {
  return struct<MasterEditionV1AccountData>(
    [
      ['key', getKeySerializer()],
      ['supply', u64()],
      ['maxSupply', option(u64())],
      ['printingMint', publicKeySerializer()],
      ['oneTimePrintingAuthorizationMint', publicKeySerializer()],
    ],
    { description: 'MasterEditionV1AccountData' }
  ) as Serializer<MasterEditionV1AccountDataArgs, MasterEditionV1AccountData>;
}

/** @deprecated Use `deserializeMasterEditionV1(rawAccount)` without any context instead. */
export function deserializeMasterEditionV1(
  context: object,
  rawAccount: RpcAccount
): MasterEditionV1;
export function deserializeMasterEditionV1(
  rawAccount: RpcAccount
): MasterEditionV1;
export function deserializeMasterEditionV1(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): MasterEditionV1 {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getMasterEditionV1AccountDataSerializer()
  );
}

export async function fetchMasterEditionV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MasterEditionV1> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'MasterEditionV1');
  return deserializeMasterEditionV1(maybeAccount);
}

export async function safeFetchMasterEditionV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MasterEditionV1 | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeMasterEditionV1(maybeAccount) : null;
}

export async function fetchAllMasterEditionV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MasterEditionV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'MasterEditionV1');
    return deserializeMasterEditionV1(maybeAccount);
  });
}

export async function safeFetchAllMasterEditionV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MasterEditionV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeMasterEditionV1(maybeAccount as RpcAccount)
    );
}

export function getMasterEditionV1GpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'tokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      supply: number | bigint;
      maxSupply: OptionOrNullable<number | bigint>;
      printingMint: PublicKey;
      oneTimePrintingAuthorizationMint: PublicKey;
    }>({
      key: [0, getKeySerializer()],
      supply: [1, u64()],
      maxSupply: [9, option(u64())],
      printingMint: [null, publicKeySerializer()],
      oneTimePrintingAuthorizationMint: [null, publicKeySerializer()],
    })
    .deserializeUsing<MasterEditionV1>((account) =>
      deserializeMasterEditionV1(account)
    );
}
