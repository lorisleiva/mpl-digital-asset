/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  option,
  publicKey as publicKeySerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  Key,
  KeyArgs,
  ReservationV1,
  ReservationV1Args,
  getKeySerializer,
  getReservationV1Serializer,
} from '../types';

export type ReservationListV1 = Account<ReservationListV1AccountData>;

export type ReservationListV1AccountData = {
  key: Key;
  masterEdition: PublicKey;
  supplySnapshot: Option<bigint>;
  reservations: Array<ReservationV1>;
};

export type ReservationListV1AccountDataArgs = {
  key: KeyArgs;
  masterEdition: PublicKey;
  supplySnapshot: OptionOrNullable<number | bigint>;
  reservations: Array<ReservationV1Args>;
};

/** @deprecated Use `getReservationListV1AccountDataSerializer()` without any argument instead. */
export function getReservationListV1AccountDataSerializer(
  _context: object
): Serializer<ReservationListV1AccountDataArgs, ReservationListV1AccountData>;
export function getReservationListV1AccountDataSerializer(): Serializer<
  ReservationListV1AccountDataArgs,
  ReservationListV1AccountData
>;
export function getReservationListV1AccountDataSerializer(
  _context: object = {}
): Serializer<ReservationListV1AccountDataArgs, ReservationListV1AccountData> {
  return struct<ReservationListV1AccountData>(
    [
      ['key', getKeySerializer()],
      ['masterEdition', publicKeySerializer()],
      ['supplySnapshot', option(u64())],
      ['reservations', array(getReservationV1Serializer())],
    ],
    { description: 'ReservationListV1AccountData' }
  ) as Serializer<
    ReservationListV1AccountDataArgs,
    ReservationListV1AccountData
  >;
}

/** @deprecated Use `deserializeReservationListV1(rawAccount)` without any context instead. */
export function deserializeReservationListV1(
  context: object,
  rawAccount: RpcAccount
): ReservationListV1;
export function deserializeReservationListV1(
  rawAccount: RpcAccount
): ReservationListV1;
export function deserializeReservationListV1(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): ReservationListV1 {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getReservationListV1AccountDataSerializer()
  );
}

export async function fetchReservationListV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ReservationListV1> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'ReservationListV1');
  return deserializeReservationListV1(maybeAccount);
}

export async function safeFetchReservationListV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ReservationListV1 | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists
    ? deserializeReservationListV1(maybeAccount)
    : null;
}

export async function fetchAllReservationListV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ReservationListV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'ReservationListV1');
    return deserializeReservationListV1(maybeAccount);
  });
}

export async function safeFetchAllReservationListV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ReservationListV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeReservationListV1(maybeAccount as RpcAccount)
    );
}

export function getReservationListV1GpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'tokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      masterEdition: PublicKey;
      supplySnapshot: OptionOrNullable<number | bigint>;
      reservations: Array<ReservationV1Args>;
    }>({
      key: [0, getKeySerializer()],
      masterEdition: [1, publicKeySerializer()],
      supplySnapshot: [33, option(u64())],
      reservations: [null, array(getReservationV1Serializer())],
    })
    .deserializeUsing<ReservationListV1>((account) =>
      deserializeReservationListV1(account)
    );
}
