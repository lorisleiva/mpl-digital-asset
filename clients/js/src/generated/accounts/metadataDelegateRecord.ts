/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
} from '@metaplex-foundation/umi';
import {
  MetadataDelegateRoleSeedArgs,
  getMetadataDelegateRoleSeedSerializer,
} from '../../hooked';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type MetadataDelegateRecord = Account<MetadataDelegateRecordAccountData>;

export type MetadataDelegateRecordAccountData = {
  key: Key;
  bump: number;
  mint: PublicKey;
  delegate: PublicKey;
  updateAuthority: PublicKey;
};

export type MetadataDelegateRecordAccountDataArgs = {
  key: KeyArgs;
  bump: number;
  mint: PublicKey;
  delegate: PublicKey;
  updateAuthority: PublicKey;
};

export function getMetadataDelegateRecordAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  MetadataDelegateRecordAccountDataArgs,
  MetadataDelegateRecordAccountData
> {
  const s = context.serializer;
  return s.struct<MetadataDelegateRecordAccountData>(
    [
      ['key', getKeySerializer(context)],
      ['bump', s.u8()],
      ['mint', s.publicKey()],
      ['delegate', s.publicKey()],
      ['updateAuthority', s.publicKey()],
    ],
    { description: 'MetadataDelegateRecordAccountData' }
  ) as Serializer<
    MetadataDelegateRecordAccountDataArgs,
    MetadataDelegateRecordAccountData
  >;
}

export function deserializeMetadataDelegateRecord(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): MetadataDelegateRecord {
  return deserializeAccount(
    rawAccount,
    getMetadataDelegateRecordAccountDataSerializer(context)
  );
}

export async function fetchMetadataDelegateRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<MetadataDelegateRecord> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'MetadataDelegateRecord');
  return deserializeMetadataDelegateRecord(context, maybeAccount);
}

export async function safeFetchMetadataDelegateRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<MetadataDelegateRecord | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists
    ? deserializeMetadataDelegateRecord(context, maybeAccount)
    : null;
}

export async function fetchAllMetadataDelegateRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<MetadataDelegateRecord[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'MetadataDelegateRecord');
    return deserializeMetadataDelegateRecord(context, maybeAccount);
  });
}

export async function safeFetchAllMetadataDelegateRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<MetadataDelegateRecord[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeMetadataDelegateRecord(context, maybeAccount as RpcAccount)
    );
}

export function getMetadataDelegateRecordGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      bump: number;
      mint: PublicKey;
      delegate: PublicKey;
      updateAuthority: PublicKey;
    }>({
      key: [0, getKeySerializer(context)],
      bump: [1, s.u8()],
      mint: [2, s.publicKey()],
      delegate: [34, s.publicKey()],
      updateAuthority: [66, s.publicKey()],
    })
    .deserializeUsing<MetadataDelegateRecord>((account) =>
      deserializeMetadataDelegateRecord(context, account)
    );
}

export function getMetadataDelegateRecordSize(): number {
  return 98;
}

export function findMetadataDelegateRecordPda(
  context: Pick<Context, 'eddsa' | 'programs' | 'serializer'>,
  seeds: {
    /** The address of the mint account */
    mint: PublicKey;
    /** The role of the metadata delegate */
    delegateRole: MetadataDelegateRoleSeedArgs;
    /** The address of the metadata's update authority */
    updateAuthority: PublicKey;
    /** The address of the delegate authority */
    delegate: PublicKey;
  }
): Pda {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );
  return context.eddsa.findPda(programId, [
    s.string({ size: 'variable' }).serialize('metadata'),
    programId.bytes,
    s.publicKey().serialize(seeds.mint),
    getMetadataDelegateRoleSeedSerializer(context).serialize(
      seeds.delegateRole
    ),
    s.publicKey().serialize(seeds.updateAuthority),
    s.publicKey().serialize(seeds.delegate),
  ]);
}
